{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["INITIAL_VALUE","price","tax","shipping","total","App","useState","values","setValues","currency","setCurrency","useEffect","fetch","a","Convert","from","to","value","handleInput","field","console","log","newValue","Number","getValue","calculate","type","rate","subtotal","Math","floor","toLocaleString","className","inputMode","pattern","onChange","e","target","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a23d2497.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Convert } from \"easy-currencies\";\nimport './App.css';\n\nconst INITIAL_VALUE = {\n  price: 0,\n  tax: 8.25,\n  shipping: 10,\n  total: 0\n};\n\nfunction App() {\n  const [values, setValues] = useState(INITIAL_VALUE);\n  const [currency, setCurrency] = useState(0);\n\n\n\n  useEffect(() => {\n    const fetch = async () => {\n      const value = await Convert(1).from(\"USD\").to(\"KRW\");\n      setCurrency(value);\n      handleInput('currency', value);\n    }\n    fetch();\n  }, [currency]);\n\n  const reset = () => {\n    const value = {...INITIAL_VALUE};\n    if (currency) {\n      value.currency = currency;\n    }\n    setValues(value);\n  }\n\n  const handleInput = (field, value) => {\n    console.log(field, value)\n    const newValue = {...values};\n    newValue[field] = Number(value);\n    setValues(newValue);\n  }\n\n  const getValue = (field) => {\n    return values[field];\n  }\n\n  const calculate = (type) => {\n    const rate = 1 + (getValue('tax') / 100);\n    const subtotal = getValue('price') * rate;\n    if (getValue('price') === 0) {\n      return 0;\n    } else if (type === 'subtotal') {\n      return subtotal\n    } else if (type === 'total') {\n      return Math.floor((subtotal + getValue('shipping')) * getValue('currency')).toLocaleString('ko-KR');\n    }\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"content-wrapper\">\n        <div className='form'>\n          <form>\n            <div>\n              <div className=\"input\">\n                <div className=\"label\">\n                  <label>Price($):</label>\n                </div>\n                <div className='input-wrapper'>\n                  <input type=\"text\" inputMode='numeric' pattern=\"[0-9]*\" value={getValue('price')} onChange={(e) => handleInput('price', e.target.value)}/>\n                </div>\n              </div>\n              <div className=\"input\">\n                <div className=\"label\">\n                  <label>Tax:</label>\n                </div>\n                <div className='input-wrapper'>\n                  <input type=\"text\" value={getValue('tax')+'%'} disabled />\n                  <div className='options'>\n                    <button type=\"button\" className='button-10' onClick={() => handleInput('tax', 8.25)}>8.25%</button>\n                    <button type=\"button\" className='button-10' onClick={() => handleInput('tax', 10.25)}>10.25%</button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"input\">\n                <div className=\"label\">\n                  <label>Total($):</label>\n                </div>\n                <div className='input-wrapper'>\n                  <input type=\"number\" value={calculate('subtotal')} disabled/>\n                </div>\n              </div>\n              <div className=\"input\">\n                <div className=\"label\">\n                  <label>Shipping($):</label>\n                </div>\n                <div className='input-wrapper'>\n                  <input type=\"text\" inputMode='numeric' pattern=\"[0-9]*\" value={getValue('shipping')} onChange={(e) => handleInput('shipping', e.target.value)} />\n                  <div className='options'>\n                    <button type=\"button\" className='button-10' onClick={() => handleInput('shipping', 10)}>$10.00</button>\n                    <button type=\"button\" className='button-10' onClick={() => handleInput('shipping', 11)}>$11.00</button>\n                    <button type=\"button\" className='button-10' onClick={() => handleInput('shipping', 12)}>$12.00</button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"input\">\n                <div className=\"label\">\n                  <label>환율(₩):</label>\n                </div>\n                <div className='input-wrapper'>\n                  <input type=\"number\" value={getValue('currency')} onChange={(e) => handleInput('currency', e.target.value)} />\n                  <div className='options'>\n                    <button type=\"button\" className='button-10' onClick={() => handleInput('currency', 1300)}>₩1300</button>\n                    <button type=\"button\" className='button-10' onClick={() => handleInput('currency', 1350)}>₩1350</button>\n                    <button type=\"button\" className='button-10' onClick={() => handleInput('currency', 1400)}>₩1400</button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"input\">\n                <div className=\"label\">\n                  <label>Total(₩):</label>\n                </div>\n                <div className='input-wrapper'>\n                  <input type=\"text\" value={calculate('total')} disabled />\n                </div>\n              </div>\n            </div>\n          </form>\n          <button type=\"button\" className='button-10' onClick={reset}>Reset</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}